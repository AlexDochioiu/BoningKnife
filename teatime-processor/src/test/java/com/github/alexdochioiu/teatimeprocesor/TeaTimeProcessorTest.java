package com.github.alexdochioiu.teatimeprocesor;

import com.google.common.base.Joiner;
import com.google.common.truth.FailureStrategy;
import com.google.common.truth.Truth;
import com.google.testing.compile.JavaFileObjects;
import com.google.testing.compile.JavaSourcesSubjectFactory;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import javax.tools.JavaFileObject;

/**
 * Created by Alexandru Iustin Dochioiu on 7/29/2018
 */
public class TeaTimeProcessorTest {

    private static final String NEW_LINE = "\n";

    /**
     * Empty class with no methods should generate an empty interface
     */
    @Test
    public void simpleClassWithNoMethods() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Even if the constructor is public, the interface should take only the public methods.
     * There are no public methods in this case so an empty interface should be generated.
     */
    @Test
    public void simpleClassWithNoMethodsAndPublicConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public SimpleClass(Object obj) {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Public Constructors and private methods should not be considered. Empty interface expected.
     */
    @Test
    public void simpleClassWithPrivateMethodAndPublicConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public SimpleClass(Object obj) {",
                        "       onPrivateMethod();",
                        "   }",
                        "",
                        "   private void onPrivateMethod() {",
                        "}",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Package Private Constructors and private methods should not be considered. Empty interface expected.
     */
    @Test
    public void simpleClassWithStaticPrivateMethodAndPackagePrivateConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   SimpleClass(Object obj) {",
                        "       SimpleClass.onStaticPrivateMethod();",
                        "   }",
                        "",
                        "   private static void onStaticPrivateMethod() {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Constructors and package private methods should not be considered. Empty interface expected.
     */
    @Test
    public void simpleClassWithPackagePrivateMethodAndPublicConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public SimpleClass(Object obj) {",
                        "       onPackagePrivateMethod();",
                        "   }",
                        "",
                        "   void onPackagePrivateMethod() {",
                        "}",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Constructors and static package private methods should not be considered. Empty interface expected.
     */
    @Test
    public void simpleClassWithStaticPackagePrivateMethodAndPackagePrivateConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   SimpleClass(Object obj) {",
                        "       SimpleClass.onStaticPackagePrivateMethod();",
                        "   }",
                        "",
                        "   static void onStaticPackagePrivateMethod() {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Public non-static method should appear in the interface.
     */
    @Test
    public void simpleClassWithPublicMethodAndPublicConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public SimpleClass(Object obj) {",
                        "       onPublicMethod();",
                        "   }",
                        "",
                        "   public void onPublicMethod() {",
                        "}",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "",
                        "   void onPublicMethod();",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Constructors and <b>static</b> methods (including the public ones) should not be considered.
     * Empty interface expected.
     */
    @Test
    public void simpleClassWithStaticPublicMethodAndPackagePrivateConstructor() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   SimpleClass(Object obj) {",
                        "       SimpleClass.onStaticPublicMethod();",
                        "   }",
                        "",
                        "   public static void onStaticPublicMethod() {",
                        "   }",
                        "}"
                )
        );

        // we do not expect static methods to be interfaced, even if they are public
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IISimpleClass {",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface generates properly for method with no params returning void.
     */
    @Test
    public void simpleClassWithVoidReturnMethodAndNoParams() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.A",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class A {",
                        "",
                        "   public void myMethod() {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IIA",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IIA {",
                        "   void myMethod();",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface generates properly for method with primitive params returning void.
     */
    @Test
    public void simpleClassWithVoidReturnMethodAndPrimitiveParam() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.A",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class A {",
                        "",
                        "   public void b(int num, long longNum) {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IIA",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IIA {",
                        "   void b(int num, long longNum);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface generates properly for method with primitive param returning primitive param.
     */
    @Test
    public void simpleClassWithPrimitiveReturnMethodAndPrimitiveParam() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.A",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class A {",
                        "",
                        "   public boolean b(int num) {",
                        "       return false;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IIA",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "public interface IIA {",
                        "   boolean b(int num);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface generates properly for method with primitive param returning Object.
     */
    @Test
    public void simpleClassWithObjectReturnMethodAndPrimitiveParam() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.A",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class A {",
                        "",
                        "   public Object b(int num) {",
                        "       return false;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IIA",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IIA {",
                        "   Object b(int num);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface generates properly for method with Object param and no return.
     */
    @Test
    public void simpleClassWithNoReturnMethodAndObjectParam() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IISimpleClass {",
                        "   void mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface should be generated properly when the class contains fields (private, package
     * private or public ; static or non-static)
     */
    @Test
    public void simpleClassContainingFields() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "public static final String publicStaticString = \"StaticFinalString\";",
                        "private int myIntPrivateField;",
                        "boolean myBooleanPackagePrivateField;",
                        "public long myLongPublicField = 21;",
                        "private String stringPrivateField = \"simplePrivate\";",
                        "String stringPackagePrivateField = \"simplePackagePrivate\";",
                        "public String stringPublicField = \"simplePublic\";",
                        "",
                        "   public String mySimpleMethod(Object obj) {",
                        "       return stringPrivateField;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "import java.lang.String;",
                        "",
                        "public interface IISimpleClass {",
                        "   String mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Interface picks up only the public methods and ignores the private or package private ones
     */
    @Test
    public void mixedVisibilityMethods() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass {",
                        "",
                        "   public boolean mySimpleMethod(Object obj) {",
                        "       return true;",
                        "   }",
                        "",
                        "   public void mySecondMethod(String str) {",
                        "   }",
                        "",
                        "   private void myThirdMethod() {",
                        "   }",
                        "",
                        "   private Integer myFourthMethod(Object obj) {",
                        "       return null;",
                        "   }",
                        "",
                        "   public Boolean myFifthMethod(String str, int myInt) {",
                        "       return null;",
                        "   }",
                        "",
                        "   void myLastMethod(Object obj) {",
                        "   }",
                        "",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Boolean;",
                        "import java.lang.Object;",
                        "import java.lang.String;",
                        "",
                        "public interface IISimpleClass {",
                        "   boolean mySimpleMethod(Object obj);",
                        "",
                        "   void mySecondMethod(String str);",
                        "",
                        "   Boolean myFifthMethod(String str, int myInt);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    //TODO implement logic and test for params annotation (such as @NotNull)

    /**
     * The build should fail when the wrong type is annotated (such as a method)
     */
    @Test
    public void invalidAnnotationUsageOnMethod() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "public class SimpleClass {",
                        "",
                        "   @Interfaced",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .failsToCompile()
                .withErrorContaining("annotation type not applicable to this kind of declaration");
    }

    /**
     * The build should fail when an interface is annotated instead of a class
     */
    @Test
    public void invalidAnnotationUsageOnInterface() {
        final JavaFileObject input = JavaFileObjects.forSourceString(
                "com.example.SimpleInterface",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "   @Interfaced",
                        "public interface SimpleInterface {",
                        "",
                        "   void mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(input))
                .processedWith(new TeaTimeProcessor())
                .failsToCompile()
                .withErrorContaining("@Interfaced can only be used for classes!");
    }

    /**
     * Annotating a class which implements an interface
     */
    @Test
    public void classImplementingInterface() {
        final JavaFileObject inputInterface = JavaFileObjects.forSourceString(
                "com.example.ISimpleInterface",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "public interface ISimpleInterface {",
                        "",
                        "   void myInterfaceMethod(String str);",
                        "}"
                )
        );
        final JavaFileObject inputClass = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass implements ISimpleInterface {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "",
                        "   @Override",
                        "   public void myInterfaceMethod(String str) {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IISimpleClass extends ISimpleInterface {",
                        "   void mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Arrays.asList(inputClass, inputInterface))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * We should ignore interface methods even when they come from an interface extended by the
     * implemented interface
     *
     * P.S. Emitting @Override to the overridden methods should still work fine
     */
    @Test
    public void classImplementingInterfaceExtendingOtherInterface() {
        final JavaFileObject baseInterface = JavaFileObjects.forSourceString(
                "com.example.IBaseInterface",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "public interface IBaseInterface {",
                        "",
                        "   void myBaseMethod();",
                        "}"
                )
        );

        final JavaFileObject inputInterface = JavaFileObjects.forSourceString(
                "com.example.ISimpleInterface",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "public interface ISimpleInterface extends IBaseInterface {",
                        "",
                        "   void myInterfaceMethod(String str);",
                        "}"
                )
        );
        final JavaFileObject inputClass = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass implements ISimpleInterface {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "",
                        "   @Override",
                        "   public void myInterfaceMethod(String str) {",
                        "   }",
                        "",
                        "   public void myBaseMethod() {", // should still work even if we omit @Override
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IISimpleClass extends ISimpleInterface {",
                        "   void mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Arrays.asList(inputClass, inputInterface, baseInterface))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * Annotating a class which extends a base class should generate an interface which:
     * 1. Contains all the methods from both the class and the base class
     * 2. Extends all the interfaces from both classes
     */
    @Test
    public void classExtendingBaseClass() {
        final JavaFileObject baseClass = JavaFileObjects.forSourceString(
                "com.example.BaseClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import java.io.Serializable;",
                        "",
                        "public class BaseClass implements Serializable {",
                        "",
                        "   public final void baseFinalMethod(String str) {",
                        "   }",
                        "",
                        "   public String baseNonFinalMethod(Object obj) {",
                        "       return null;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject inputClass = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass extends BaseClass {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.io.Serializable;",
                        "import java.lang.Object;",
                        "import java.lang.String;",
                        "",
                        "public interface IISimpleClass extends Serializable {",
                        "   void mySimpleMethod(Object obj);",
                        "",
                        "   void baseFinalMethod(String str);",
                        "",
                        "   String baseNonFinalMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Arrays.asList(inputClass, baseClass))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * When a class overrides a method from a base class, the generated interface should pick it up
     * only once
     */
    @Test
    public void classOverridingMethodFromBaseClass() {
        final JavaFileObject baseClass = JavaFileObjects.forSourceString(
                "com.example.BaseClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import java.io.Serializable;",
                        "",
                        "public class BaseClass implements Serializable {",
                        "",
                        "   public final void baseFinalMethod(String str) {",
                        "   }",
                        "",
                        "   public String baseNonFinalMethod(Object obj) {",
                        "       return null;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject inputClass = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass extends BaseClass {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "",
                        "   @Override",
                        "   public String baseNonFinalMethod(Object myObject) {",
                        "       return null;",
                        "   }",
                        "}"
                )
        );
        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.io.Serializable;",
                        "import java.lang.Object;",
                        "import java.lang.String;",
                        "",
                        "public interface IISimpleClass extends Serializable {",
                        "   void mySimpleMethod(Object obj);",
                        "",
                        "   String baseNonFinalMethod(Object myObject);",
                        "",
                        "   void baseFinalMethod(String str);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Arrays.asList(inputClass, baseClass))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * A class can implement the interface generated for itself
     */
    @Test
    public void classCanImplementItsGeneratedInterface() {
        final JavaFileObject inputWithInterface = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass implements IISimpleClass {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "}"
                )
        );

        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IISimpleClass {",
                        "   void mySimpleMethod(Object obj);",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(inputWithInterface))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }

    /**
     * A class can have methods which returns an instance of its generated interface
     */
    @Test
    public void classMethodCanReturnInstanceOfItsGeneratedInterface() {
        final JavaFileObject inputWithInterface = JavaFileObjects.forSourceString(
                "com.example.SimpleClass",
                Joiner.on(NEW_LINE).join(
                        "package com.example;",
                        "",
                        "import com.github.alexdochioiu.teatime.Interfaced;",
                        "",
                        "@Interfaced",
                        "public class SimpleClass implements IISimpleClass {",
                        "",
                        "   public void mySimpleMethod(Object obj) {",
                        "   }",
                        "",
                        "   public IISimpleClass getSelf() {",
                        "       return this;",
                        "   }",
                        "}"
                )
        );

        final JavaFileObject output = JavaFileObjects.forSourceString(
                "com.example.IISimpleClass",
                Joiner.on(NEW_LINE).join(
                        "// Generated by TeaTime",
                        "package com.example;",
                        "",
                        "import java.lang.Object;",
                        "",
                        "public interface IISimpleClass {",
                        "   void mySimpleMethod(Object obj);",
                        "",
                        "   IISimpleClass getSelf();",
                        "}"
                )
        );

        Truth.assert_()
                .about(JavaSourcesSubjectFactory.javaSources())
                .that(Collections.singletonList(inputWithInterface))
                .processedWith(new TeaTimeProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(output);
    }
}
